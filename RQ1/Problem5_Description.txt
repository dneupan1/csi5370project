PROBLEM: Wildcard matching

LEVEL OF DIFFICULTY: Hard

TAGS: String, Dynamic Programming, Greedy, Recursion

DESCRIPTION:
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Example 1:
  Input: s = "aa", p = "a"
  Output: false
  Explanation: "a" does not match the entire string "aa".

Example 2:
  Input: s = "aa", p = "*"
  Output: true
  Explanation: '*' matches any sequence.

Example 3:
  Input: s = "cb", p = "?a"
  Output: false
  Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.


---------------------------------------------------------------------------------------------------------------------------

Input prompt for the implementation:

You are a software developer. You have been given a problem statement as below:
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Example 1:
  Input: s = "aa", p = "a"
  Output: false
  Explanation: "a" does not match the entire string "aa".

Example 2:
  Input: s = "aa", p = "*"
  Output: true
  Explanation: '*' matches any sequence.

Example 3:
  Input: s = "cb", p = "?a"
  Output: false
  Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.


Implement a solution based on the given examples in Python.
Follow good software developer practices while generating the code.
Comment the code liberally to explain what each piece does and why it is written that way.

-------------------------------------------------------------------------------------------------------------------------------

Input prompt for the test code generation:

You are a software developer writing tests for some software functions.

Given below is a function:
  **** Generated Code is added here ****

Implement test for the given implementation using pytest in Python.
Ideal test code should have 100 percent test coverage.
Follow good software developer practices while generating the code.
Comment the code liberally to explain what each piece does and why it is written that way.

--------------------------------------------------------------------------------------------------------------------------------

Input prompt for the repeating the test code generation in case the test fails.

The test code fails with following error:
 *** insert error from the console here ****

 Fix the error and regenerate the test code. Run the code against the function below until you have the tests passing. The function below is absolutely correct.
 *** insert the generated implementation code here ****