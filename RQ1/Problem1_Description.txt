PROBLEM: Longest Substring Without Repeating Characters

LEVEL OF DIFFICULTY: Medium

TAGS: Hash Table, String, Sliding Window

DESCRIPTION:
Given a string s, find the length of the longest substring without repeating characters.

Example 1:
    Input: s = "abcabcbb"
    Output: 3
    Explanation: The answer is "abc", with the length of 3.

Example 2:
    Input: s = "bbbbb"
    Output: 1
    Explanation: The answer is "b", with the length of 1.

Example 3:
    Input: s = "pwwkew"
    Output: 3
    Explanation: The answer is "wke", with the length of 3.
    Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.


---------------------------------------------------------------------------------------------------------------------------

Input prompt for the implementation:

You are a software developer. You have been given a problem statement as below:

Given a string s, find the length of the longest substring without repeating characters.
Example 1:
    Input: s = "abcabcbb"
    Output: 3
    Explanation: The answer is "abc", with the length of 3.
Example 2:
    Input: s = "bbbbb"
    Output: 1
    Explanation: The answer is "b", with the length of 1.
Example 3:
    Input: s = "pwwkew"
    Output: 3
    Explanation: The answer is "wke", with the length of 3.
    Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Implement a solution based on the given examples in Python.
Follow good software developer practices while generating the code.
Comment the code liberally to explain what each piece does and why it is written that way.

-------------------------------------------------------------------------------------------------------------------------------

Input prompt for the test code generation:

You are a software developer writing tests for some software functions.

Given below is a function:
  **** Generated Code is added here ****

Implement test for the given implementation using pytest in Python.
Ideal test code should have 100 percent test coverage.
Follow good software developer practices while generating the code.
Comment the code liberally to explain what each piece does and why it is written that way.