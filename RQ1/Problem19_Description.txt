PROBLEM: Number of Times Binary String Is Prefix-Aligned

LEVEL OF DIFFICULTY: Medium

TAGS: Array

DESCRIPTION:
You have a 1-indexed binary string of length n where all the bits are 0 initially. We will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. You are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the ith step.

A binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros.

Return the number of times the binary string is prefix-aligned during the flipping process.

Example 1:
Input: flips = [3,2,4,1,5]
Output: 2
Explanation: The binary string is initially "00000".
After applying step 1: The string becomes "00100", which is not prefix-aligned.
After applying step 2: The string becomes "01100", which is not prefix-aligned.
After applying step 3: The string becomes "01110", which is not prefix-aligned.
After applying step 4: The string becomes "11110", which is prefix-aligned.
After applying step 5: The string becomes "11111", which is prefix-aligned.
We can see that the string was prefix-aligned 2 times, so we return 2.

Example 2:
Input: flips = [4,1,2,3]
Output: 1
Explanation: The binary string is initially "0000".
After applying step 1: The string becomes "0001", which is not prefix-aligned.
After applying step 2: The string becomes "1001", which is not prefix-aligned.
After applying step 3: The string becomes "1101", which is not prefix-aligned.
After applying step 4: The string becomes "1111", which is prefix-aligned.
We can see that the string was prefix-aligned 1 time, so we return 1.
---------------------------------------------------------------------------------------------------------------------------

Input prompt for the implementation:

You are a software developer. You have been given a problem statement as below:
 ** description here **

Implement a solution based on the given examples in Python.
Follow good software developer practices while generating the code.
Comment the code liberally to explain what each piece does and why it is written that way.

-------------------------------------------------------------------------------------------------------------------------------

Input prompt for the test code generation:

You are a software developer writing tests for some software functions.

Given below is a function:
  **** Generated Code is added here ****

Implement test for the given implementation using pytest in Python.
Ideal test code should have 100 percent test coverage.
Follow good software developer practices while generating the code.
Comment the code liberally to explain what each piece does and why it is written that way.

--------------------------------------------------------------------------------------------------------------------------------

Input prompt for the repeating the test code generation in case the test fails.

The test code fails with following error:
 *** insert error from the console here ****

 Fix the error and regenerate the test code. Run the code against the function below until you have the tests passing. 
 The function below is absolutely correct.
 *** insert the generated implementation code here ****

---------------------------------------------------------------------------------------------------------------------------

Input prompt for the implementation:

You are a software developer. You have been given a problem statement as below:
You have a 1-indexed binary string of length n where all the bits are 0 initially. We will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. You are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the ith step.

A binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros.

Return the number of times the binary string is prefix-aligned during the flipping process.

Example 1:
Input: flips = [3,2,4,1,5]
Output: 2
Explanation: The binary string is initially "00000".
After applying step 1: The string becomes "00100", which is not prefix-aligned.
After applying step 2: The string becomes "01100", which is not prefix-aligned.
After applying step 3: The string becomes "01110", which is not prefix-aligned.
After applying step 4: The string becomes "11110", which is prefix-aligned.
After applying step 5: The string becomes "11111", which is prefix-aligned.
We can see that the string was prefix-aligned 2 times, so we return 2.

Example 2:
Input: flips = [4,1,2,3]
Output: 1
Explanation: The binary string is initially "0000".
After applying step 1: The string becomes "0001", which is not prefix-aligned.
After applying step 2: The string becomes "1001", which is not prefix-aligned.
After applying step 3: The string becomes "1101", which is not prefix-aligned.
After applying step 4: The string becomes "1111", which is prefix-aligned.
We can see that the string was prefix-aligned 1 time, so we return 1.

Implement a solution based on the given examples in Python.
Follow good software developer practices while generating the code.
Comment the code liberally to explain what each piece does and why it is written that way.
