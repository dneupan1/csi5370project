PROBLEM: Count the repetitions

LEVEL OF DIFFICULTY: Hard

TAGS: String, Dynamic Programming

DESCRIPTION: 
We define str = [s, n] as the string str which consists of the string s concatenated n times.

For example, str == ["abc", 3] =="abcabcabc".
We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.

For example, s1 = "abc" can be obtained from s2 = "abdbec" based on our definition by removing the bolded underlined characters.
You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].

Return the maximum integer m such that str = [str2, m] can be obtained from str1.

Example 1:
Input: s1 = "acb", n1 = 4, s2 = "ab", n2 = 2
Output: 2

Example 2:
Input: s1 = "acb", n1 = 1, s2 = "acb", n2 = 1
Output: 1
 
---------------------------------------------------------------------------------------------------------------------------

Input prompt for the implementation:

You are a software developer. You have been given a problem statement as below:
We define str = [s, n] as the string str which consists of the string s concatenated n times.

For example, str == ["abc", 3] =="abcabcabc".
We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.

For example, s1 = "abc" can be obtained from s2 = "abdbec" based on our definition by removing the bolded underlined characters.
You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].

Return the maximum integer m such that str = [str2, m] can be obtained from str1.

Example 1:
Input: s1 = "acb", n1 = 4, s2 = "ab", n2 = 2
Output: 2

Example 2:
Input: s1 = "acb", n1 = 1, s2 = "acb", n2 = 1
Output: 1

Implement a solution based on the given examples in Python.
Follow good software developer practices while generating the code.
Comment the code liberally to explain what each piece does and why it is written that way.

-------------------------------------------------------------------------------------------------------------------------------

Input prompt for the test code generation:

You are a software developer writing tests for some software functions.

Given below is a function:
  **** Generated Code is added here ****

Implement test for the given implementation using pytest in Python.
Ideal test code should have 100 percent test coverage.
Follow good software developer practices while generating the code.
Comment the code liberally to explain what each piece does and why it is written that way.

--------------------------------------------------------------------------------------------------------------------------------

Input prompt for the repeating the test code generation in case the test fails.

The test code fails with following error:
 *** insert error from the console here ****

 Fix the error and regenerate the test code. Run the code against the function below until you have the tests passing. The function below is absolutely correct.
 *** insert the generated implementation code here ****

---------------------------------------------------------------------------------------------------------------------------

Input prompt for the implementation:

You are a software developer. You have been given a problem statement as below:
We define str = [s, n] as the string str which consists of the string s concatenated n times.

For example, str == ["abc", 3] =="abcabcabc".
We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.

For example, s1 = "abc" can be obtained from s2 = "abdbec" based on our definition by removing the bolded underlined characters.
You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].

Return the maximum integer m such that str = [str2, m] can be obtained from str1.

Example 1:
Input: s1 = "acb", n1 = 4, s2 = "ab", n2 = 2
Output: 2

Example 2:
Input: s1 = "acb", n1 = 1, s2 = "acb", n2 = 1
Output: 1

Implement a solution based on the given examples in Python.
Follow good software developer practices while generating the code.
Comment the code liberally to explain what each piece does and why it is written that way.
