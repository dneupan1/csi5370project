# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import Problem8_GeneratedSolution as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    list_node_1 = module_0.reverseKGroup(list_node_0, bool_0)
    assert (
        f"{type(list_node_1).__module__}.{type(list_node_1).__qualname__}"
        == "Problem8_GeneratedSolution.ListNode"
    )
    assert list_node_1.val == 0
    assert list_node_1.next is None
    module_0.reverseKGroup(bool_0, list_node_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    list_node_0 = module_0.ListNode(set_0, set_0)
    bool_0 = True
    module_0.reverseKGroup(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    list_node_0 = module_0.ListNode(none_type_0)
    list_node_1 = module_0.ListNode()
    assert list_node_1.val == 0
    bool_0 = False
    list_node_2 = module_0.ListNode(bool_0, bool_0)
    module_0.reverseKGroup(list_node_2, bool_0)


def test_case_3():
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    list_node_0 = module_0.ListNode(next=bool_0)
    assert list_node_0.val == 0
    none_type_0 = None
    var_0 = module_0.ListNode(next=none_type_0)
    assert var_0.val == 0
    list_node_1 = module_0.ListNode(var_0, bool_0)
    int_0 = 2163
    module_0.reverseKGroup(list_node_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    none_type_0 = None
    list_node_1 = module_0.ListNode(none_type_0)
    float_0 = 3338.19041
    var_0 = module_0.reverseKGroup(list_node_1, float_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "Problem8_GeneratedSolution.ListNode"
    )
    assert var_0.val is None
    assert var_0.next is None
    module_0.reverseKGroup(none_type_0, list_node_0)
