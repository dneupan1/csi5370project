# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import Problem3_GeneratedSolution as module_0


def test_case_0():
    bool_0 = True
    int_0 = module_0.reverse(bool_0)
    assert int_0 == 1


def test_case_1():
    bool_0 = False
    int_0 = module_0.reverse(bool_0)
    assert int_0 == 0


def test_case_2():
    int_0 = -16
    int_1 = module_0.reverse(int_0)
    assert int_1 == -61


def test_case_3():
    int_0 = 10
    int_1 = module_0.reverse(int_0)
    assert int_1 == 1


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -2089
    int_1 = module_0.reverse(int_0)
    assert int_1 == -9802
    int_2 = module_0.reverse(int_0)
    assert int_2 == -9802
    int_3 = module_0.reverse(int_2)
    assert int_3 == -2089
    int_4 = -2147483648
    int_5 = module_0.reverse(int_4)
    assert int_5 == 0
    int_6 = module_0.reverse(int_2)
    assert int_6 == -2089
    int_7 = module_0.reverse(int_6)
    assert int_7 == -9802
    int_8 = 2623
    int_9 = module_0.reverse(int_8)
    assert int_9 == 3262
    int_10 = -384
    int_11 = module_0.reverse(int_10)
    assert int_11 == -483
    int_12 = module_0.reverse(int_7)
    assert int_12 == -2089
    none_type_0 = None
    int_13 = -2739
    int_14 = module_0.reverse(int_13)
    assert int_14 == -9372
    int_15 = module_0.reverse(int_5)
    assert int_15 == 0
    int_16 = module_0.reverse(int_8)
    assert int_16 == 3262
    module_0.reverse(none_type_0)
