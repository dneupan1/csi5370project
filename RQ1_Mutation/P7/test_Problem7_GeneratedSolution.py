# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import Problem7_GeneratedSolution as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -2810
    module_0.swapPairs(int_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.swapPairs(bool_0)
    assert var_0 is False


def test_case_2():
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    list_node_1 = module_0.ListNode(next=list_node_0)
    assert list_node_1.val == 0
    var_0 = module_0.swapPairs(list_node_1)
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert list_node_1.next is None
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert var_0.val == 0
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )


def test_case_3():
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    var_0 = module_0.swapPairs(list_node_0)
    assert var_0.val == 0
    list_node_1 = module_0.ListNode(next=var_0)
    assert list_node_1.val == 0
    var_1 = module_0.swapPairs(list_node_1)
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert list_node_1.next is None
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert var_1.val == 0
    assert (
        f"{type(var_1.next).__module__}.{type(var_1.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    var_2 = module_1.object()


def test_case_4():
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    list_node_2 = module_0.ListNode(next=list_node_1)
    assert list_node_2.val == 0
    list_node_3 = module_0.ListNode(list_node_1)
    var_0 = module_0.swapPairs(list_node_0)
    assert var_0.val == 0
    var_1 = module_0.swapPairs(list_node_1)
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert list_node_1.next is None
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert var_1.val == 0
    assert (
        f"{type(var_1.next).__module__}.{type(var_1.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    list_node_4 = module_0.ListNode()
    assert list_node_4.val == 0
    var_2 = module_0.swapPairs(var_0)
    assert var_1.next is None
    assert (
        f"{type(var_2.val).__module__}.{type(var_2.val).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert (
        f"{type(var_2.next).__module__}.{type(var_2.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    none_type_0 = None
    var_3 = module_0.swapPairs(none_type_0)
    list_node_5 = module_0.ListNode(next=list_node_1)
    assert list_node_5.val == 0
    var_4 = module_0.swapPairs(none_type_0)
    var_5 = module_0.swapPairs(var_4)
    list_node_6 = module_0.ListNode(var_2)
    var_6 = module_0.swapPairs(list_node_2)
    assert (
        f"{type(var_6.val).__module__}.{type(var_6.val).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    list_node_7 = module_0.ListNode()
    assert list_node_7.val == 0


def test_case_5():
    list_node_0 = module_0.ListNode()
    assert list_node_0.val == 0
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    list_node_2 = module_0.ListNode(next=list_node_1)
    assert list_node_2.val == 0
    list_node_3 = module_0.ListNode(list_node_1)
    var_0 = module_0.swapPairs(list_node_0)
    assert var_0.val == 0
    list_node_4 = module_0.ListNode()
    assert list_node_4.val == 0
    var_1 = module_0.swapPairs(list_node_3)
    list_node_5 = module_0.ListNode(next=var_1)
    assert list_node_5.val == 0
    var_2 = module_0.swapPairs(var_0)
    assert var_2.val == 0
    none_type_0 = None
    var_3 = module_0.swapPairs(list_node_0)
    assert var_3.val == 0
    list_node_6 = module_0.ListNode()
    assert list_node_6.val == 0
    var_4 = module_0.swapPairs(none_type_0)
    var_5 = module_0.swapPairs(none_type_0)
    var_6 = module_0.swapPairs(list_node_2)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert (
        f"{type(var_6.val).__module__}.{type(var_6.val).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert (
        f"{type(var_6.next).__module__}.{type(var_6.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    list_node_7 = module_0.ListNode(next=var_6)
    assert list_node_7.val == 0
    var_7 = module_0.swapPairs(var_3)
    assert var_7.val == 0
    object_0 = module_1.object()
    var_8 = module_0.swapPairs(var_5)
    var_9 = module_0.swapPairs(list_node_7)
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert list_node_2.next is None
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert (
        f"{type(var_2.next).__module__}.{type(var_2.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert (
        f"{type(var_3.next).__module__}.{type(var_3.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert (
        f"{type(var_7.next).__module__}.{type(var_7.next).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    assert (
        f"{type(var_9.val).__module__}.{type(var_9.val).__qualname__}"
        == "Problem7_GeneratedSolution.ListNode"
    )
    list_node_8 = module_0.ListNode()
    assert list_node_8.val == 0
