# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import Problem40_GeneratedSolution as module_0


def test_case_0():
    bool_0 = False
    bytes_0 = b"\x14\x1cc"
    num_array_0 = module_0.NumArray(bytes_0)
    assert (
        f"{type(num_array_0).__module__}.{type(num_array_0).__qualname__}"
        == "Problem40_GeneratedSolution.NumArray"
    )
    assert num_array_0.n == 3
    assert num_array_0.tree == [147, 48, 99, 20, 28, 0, 0, 0, 0, 0, 0, 0]
    none_type_0 = num_array_0.update(bool_0, bool_0)
    assert num_array_0.tree == [127, 28, 99, False, 28, 0, 0, 0, 0, 0, 0, 0]


def test_case_1():
    bytes_0 = b"@\xaev#\xee\x87\xde\x1c\xc2\xbc\xc8\xef"
    num_array_0 = module_0.NumArray(bytes_0)
    assert (
        f"{type(num_array_0).__module__}.{type(num_array_0).__qualname__}"
        == "Problem40_GeneratedSolution.NumArray"
    )
    assert num_array_0.n == 12
    assert num_array_0.tree == [
        1835,
        764,
        1071,
        356,
        408,
        444,
        627,
        238,
        118,
        273,
        135,
        250,
        194,
        388,
        239,
        64,
        174,
        0,
        0,
        35,
        238,
        0,
        0,
        222,
        28,
        0,
        0,
        188,
        200,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ]
    int_0 = 796
    num_array_1 = module_0.NumArray(bytes_0)
    assert num_array_1.tree == [
        1835,
        764,
        1071,
        356,
        408,
        444,
        627,
        238,
        118,
        273,
        135,
        250,
        194,
        388,
        239,
        64,
        174,
        0,
        0,
        35,
        238,
        0,
        0,
        222,
        28,
        0,
        0,
        188,
        200,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ]
    none_type_0 = num_array_1.update(int_0, int_0)
    assert num_array_1.tree == [
        2392,
        764,
        1628,
        356,
        408,
        444,
        1184,
        238,
        118,
        273,
        135,
        250,
        194,
        388,
        796,
        64,
        174,
        0,
        0,
        35,
        238,
        0,
        0,
        222,
        28,
        0,
        0,
        188,
        200,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ]
    bool_0 = True
    int_1 = num_array_1.sumRange(bool_0, bool_0)
    assert int_1 == 174


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"@\xfb\xd8\r\xfdj\x06\xbc\xd9'\x8aQ\xc4W"
    int_0 = -1618
    num_array_0 = module_0.NumArray(bytes_0)
    assert (
        f"{type(num_array_0).__module__}.{type(num_array_0).__qualname__}"
        == "Problem40_GeneratedSolution.NumArray"
    )
    assert num_array_0.n == 14
    assert num_array_0.tree == [
        1855,
        909,
        946,
        544,
        365,
        582,
        364,
        315,
        229,
        359,
        6,
        405,
        177,
        277,
        87,
        64,
        251,
        216,
        13,
        253,
        106,
        0,
        0,
        188,
        217,
        39,
        138,
        81,
        196,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ]
    none_type_0 = None
    num_array_0.sumRange(int_0, none_type_0)


def test_case_3():
    bytes_0 = b"@\xfb\xd8\r\xfdj\x06\xbc\xd9'\x8aQ\xc4W"
    int_0 = -1614
    num_array_0 = module_0.NumArray(bytes_0)
    assert (
        f"{type(num_array_0).__module__}.{type(num_array_0).__qualname__}"
        == "Problem40_GeneratedSolution.NumArray"
    )
    assert num_array_0.n == 14
    assert num_array_0.tree == [
        1855,
        909,
        946,
        544,
        365,
        582,
        364,
        315,
        229,
        359,
        6,
        405,
        177,
        277,
        87,
        64,
        251,
        216,
        13,
        253,
        106,
        0,
        0,
        188,
        217,
        39,
        138,
        81,
        196,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ]
    int_1 = num_array_0.sumRange(int_0, int_0)
    assert int_1 == 0


def test_case_4():
    bytes_0 = b"@\xfb\xd8\r\xfdj\xbc\xbc\xd9'\x8aQ\xc4W"
    int_0 = -1592
    num_array_0 = module_0.NumArray(bytes_0)
    assert (
        f"{type(num_array_0).__module__}.{type(num_array_0).__qualname__}"
        == "Problem40_GeneratedSolution.NumArray"
    )
    assert num_array_0.n == 14
    assert num_array_0.tree == [
        2037,
        1091,
        946,
        544,
        547,
        582,
        364,
        315,
        229,
        359,
        188,
        405,
        177,
        277,
        87,
        64,
        251,
        216,
        13,
        253,
        106,
        0,
        0,
        188,
        217,
        39,
        138,
        81,
        196,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ]
    int_1 = 800
    num_array_1 = module_0.NumArray(bytes_0)
    assert num_array_1.tree == [
        2037,
        1091,
        946,
        544,
        547,
        582,
        364,
        315,
        229,
        359,
        188,
        405,
        177,
        277,
        87,
        64,
        251,
        216,
        13,
        253,
        106,
        0,
        0,
        188,
        217,
        39,
        138,
        81,
        196,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ]
    none_type_0 = num_array_1.update(int_0, int_1)
    assert num_array_1.tree == [
        2773,
        1827,
        946,
        1280,
        547,
        582,
        364,
        1051,
        229,
        359,
        188,
        405,
        177,
        277,
        87,
        800,
        251,
        216,
        13,
        253,
        106,
        0,
        0,
        188,
        217,
        39,
        138,
        81,
        196,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ]
    int_2 = num_array_0.sumRange(int_0, int_0)
    assert int_2 == 0
    int_3 = num_array_1.sumRange(int_0, int_2)
    assert int_3 == 800


def test_case_5():
    bytes_0 = b"@\xfb\xd8\r\xfdj\xbc\xbc\xd9'\x8aQ\xc4W"
    int_0 = -1592
    num_array_0 = module_0.NumArray(bytes_0)
    assert (
        f"{type(num_array_0).__module__}.{type(num_array_0).__qualname__}"
        == "Problem40_GeneratedSolution.NumArray"
    )
    assert num_array_0.n == 14
    assert num_array_0.tree == [
        2037,
        1091,
        946,
        544,
        547,
        582,
        364,
        315,
        229,
        359,
        188,
        405,
        177,
        277,
        87,
        64,
        251,
        216,
        13,
        253,
        106,
        0,
        0,
        188,
        217,
        39,
        138,
        81,
        196,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ]
    int_1 = 800
    num_array_1 = module_0.NumArray(bytes_0)
    assert num_array_1.tree == [
        2037,
        1091,
        946,
        544,
        547,
        582,
        364,
        315,
        229,
        359,
        188,
        405,
        177,
        277,
        87,
        64,
        251,
        216,
        13,
        253,
        106,
        0,
        0,
        188,
        217,
        39,
        138,
        81,
        196,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ]
    int_2 = num_array_0.sumRange(int_0, int_0)
    assert int_2 == 0
    int_3 = num_array_1.sumRange(int_2, int_1)
    assert int_3 == 2037
