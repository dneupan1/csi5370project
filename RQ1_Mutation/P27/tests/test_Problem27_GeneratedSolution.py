# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import Problem27_GeneratedSolution as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xa95c\x95\x8c"
    module_0.search(bytes_0, bytes_0)


def test_case_1():
    list_0 = []
    var_0 = module_0.search(list_0, list_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "aDj"
    var_0 = module_0.search(str_0, str_0)
    assert var_0 == -1
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "5b9'_"
    var_0 = module_0.search(str_0, str_0)
    assert var_0 == -1
    module_0.search(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "9w`\x0csW,xns$8r"
    var_0 = module_0.search(str_0, str_0)
    assert var_0 == -1
    var_1 = module_0.search(str_0, str_0)
    assert var_1 == -1
    module_0.search(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    complex_0 = 3445.1802 - 1389j
    list_0 = [tuple_0, tuple_0, complex_0]
    var_0 = module_0.search(list_0, tuple_0)
    assert var_0 == 1
    int_0 = -1288
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "RV'JyLU#L!3}eJ"
    str_1 = "VJyLU#L\x0c!3}eJ"
    var_0 = module_0.search(str_1, str_1)
    assert var_0 == -1
    module_0.search(str_0, var_0)
