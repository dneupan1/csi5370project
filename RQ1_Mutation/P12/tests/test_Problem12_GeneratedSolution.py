# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import Problem12_GeneratedSolution as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = -820.53 - 1239j
    module_0.flatten(complex_0)


def test_case_1():
    list_0 = []
    var_0 = module_0.flatten(list_0)
    var_1 = module_0.flatten(var_0)


def test_case_2():
    float_0 = 701.0831
    tree_node_0 = module_0.TreeNode(right=float_0)
    assert tree_node_0.val == 0


def test_case_3():
    str_0 = "J~"
    tuple_0 = (str_0,)
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    tree_node_1 = module_0.TreeNode(tuple_0, right=tuple_0)
    str_1 = "vZKQ\x0c"
    str_2 = "D."
    tree_node_2 = module_0.TreeNode(left=tree_node_0)
    assert tree_node_2.val == 0
    list_0 = [tree_node_1, tree_node_2, tree_node_0, str_0]
    tree_node_3 = module_0.TreeNode()
    assert tree_node_3.val == 0
    tree_node_4 = module_0.TreeNode(left=list_0, right=tuple_0)
    assert tree_node_4.val == 0
    tree_node_5 = module_0.TreeNode(right=list_0)
    assert tree_node_5.val == 0
    var_0 = module_0.flatten(tree_node_2)
    assert tree_node_2.left is None
    assert (
        f"{type(tree_node_2.right).__module__}.{type(tree_node_2.right).__qualname__}"
        == "Problem12_GeneratedSolution.TreeNode"
    )
    tree_node_6 = module_0.TreeNode(left=list_0, right=str_2)
    assert tree_node_6.val == 0
    tree_node_7 = module_0.TreeNode(tree_node_1)
    tree_node_8 = module_0.TreeNode(left=str_1, right=str_2)
    assert tree_node_8.val == 0


def test_case_4():
    tree_node_0 = module_0.TreeNode()
    assert tree_node_0.val == 0
    bool_0 = True
    tree_node_1 = module_0.TreeNode(bool_0)
    none_type_0 = None
    var_0 = module_0.flatten(none_type_0)
    tree_node_2 = module_0.TreeNode(left=bool_0, right=bool_0)
    assert tree_node_2.val == 0
    none_type_1 = None
    var_1 = module_0.flatten(tree_node_1)
    tree_node_3 = module_0.TreeNode(left=tree_node_1, right=none_type_1)
    assert tree_node_3.val == 0


def test_case_5():
    none_type_0 = None
    tree_node_0 = module_0.TreeNode(none_type_0)
    tree_node_1 = module_0.TreeNode(none_type_0, right=tree_node_0)
    tree_node_2 = module_0.TreeNode(left=tree_node_1, right=none_type_0)
    assert tree_node_2.val == 0
    tree_node_3 = module_0.TreeNode()
    assert tree_node_3.val == 0
    var_0 = module_0.flatten(tree_node_2)
    assert tree_node_2.left is None
    assert (
        f"{type(tree_node_2.right).__module__}.{type(tree_node_2.right).__qualname__}"
        == "Problem12_GeneratedSolution.TreeNode"
    )
    var_1 = module_0.flatten(tree_node_2)
    var_2 = module_0.flatten(tree_node_0)
