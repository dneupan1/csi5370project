# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import Problem2_GeneratedSolution as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"77T^%\xeaN\x8a\x90+>\xc1\x93\xa1(I\x06\xa2H\xbe"
    module_0.count_good_subarrays(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    module_0.count_good_subarrays(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    bytes_0 = b"\xdd\x15m&\xf6\xf7\x7fF("
    module_0.count_good_subarrays(bytes_0, bool_0)


def test_case_3():
    bool_0 = True
    bytes_0 = b"\xdd\x15m&\xf6\xf7\x7fF("
    var_0 = module_0.count_good_subarrays(bytes_0, bool_0)
    assert var_0 == 9


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.count_good_subarrays(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    var_0 = module_0.count_good_subarrays(tuple_0, bool_0)
    assert var_0 == 10
    bool_1 = True
    bytes_0 = b"\xdd\x15m&\xf6\xf7\x7fF("
    var_1 = module_0.count_good_subarrays(bytes_0, bool_1)
    assert var_1 == 9
    module_0.count_good_subarrays(var_1, bool_1)
