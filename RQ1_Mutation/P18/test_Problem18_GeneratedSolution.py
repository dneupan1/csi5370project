# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import Problem18_GeneratedSolution as module_0


def test_case_0():
    int_0 = 297
    float_0 = 282.6442
    var_0 = module_0.flipLights(float_0, int_0)
    assert var_0 == 8
    none_type_0 = None
    var_1 = module_0.flipLights(int_0, none_type_0)
    assert var_1 == 8
    var_2 = module_0.flipLights(none_type_0, none_type_0)
    assert var_2 == 8
    var_3 = module_0.flipLights(int_0, int_0)
    assert var_3 == 8
    var_4 = module_0.flipLights(int_0, int_0)
    assert var_4 == 8
    var_5 = module_0.flipLights(int_0, int_0)
    assert var_5 == 8
    var_6 = module_0.flipLights(var_5, var_5)
    assert var_6 == 8
    bool_0 = False
    var_7 = module_0.flipLights(bool_0, none_type_0)
    assert var_7 == 1
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_8 = module_0.flipLights(var_4, var_4)
    assert var_8 == 8
    var_9 = module_0.flipLights(var_3, bool_0)
    assert var_9 == 1
    var_10 = module_0.flipLights(var_4, dict_0)
    assert var_10 == 8
    var_11 = module_0.flipLights(var_8, var_5)
    assert var_11 == 8
    var_12 = module_0.flipLights(dict_0, dict_0)
    assert var_12 == 8


def test_case_1():
    none_type_0 = None
    var_0 = module_0.flipLights(none_type_0, none_type_0)
    assert var_0 == 8


def test_case_2():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.flipLights(bool_0, none_type_0)
    assert var_0 == 1


def test_case_3():
    none_type_0 = None
    var_0 = module_0.flipLights(none_type_0, none_type_0)
    assert var_0 == 8
    bool_0 = True
    var_1 = module_0.flipLights(bool_0, bool_0)
    assert var_1 == 2
    var_2 = module_0.flipLights(bool_0, bool_0)
    assert var_2 == 2


def test_case_4():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_0.flipLights(tuple_0, none_type_0)
    assert var_0 == 8
    var_1 = module_0.flipLights(tuple_0, tuple_0)
    assert var_1 == 8
    bool_0 = True
    var_2 = module_0.flipLights(bool_0, bool_0)
    assert var_2 == 2
    var_3 = module_0.flipLights(tuple_0, tuple_0)
    assert var_3 == 8
    var_4 = module_0.flipLights(var_2, bool_0)
    assert var_4 == 3
    var_5 = module_0.flipLights(var_2, var_2)
    assert var_5 == 4
    int_0 = -230
    set_0 = set()
    var_6 = module_0.flipLights(set_0, var_2)
    assert var_6 == 7
    var_7 = module_0.flipLights(set_0, set_0)
    assert var_7 == 8
    var_8 = module_0.flipLights(int_0, int_0)
    assert var_8 == 8
    var_9 = module_0.flipLights(int_0, int_0)
    assert var_9 == 8
    var_10 = module_0.flipLights(int_0, int_0)
    assert var_10 == 8


def test_case_5():
    none_type_0 = None
    var_0 = module_0.flipLights(none_type_0, none_type_0)
    assert var_0 == 8
    none_type_1 = None
    bool_0 = True
    tuple_0 = ()
    var_1 = module_0.flipLights(tuple_0, none_type_1)
    assert var_1 == 8
    var_2 = module_0.flipLights(none_type_1, bool_0)
    assert var_2 == 4
    var_3 = module_0.flipLights(none_type_1, bool_0)
    assert var_3 == 4
    var_4 = module_0.flipLights(none_type_1, bool_0)
    assert var_4 == 4
    var_5 = module_0.flipLights(none_type_1, bool_0)
    assert var_5 == 4
